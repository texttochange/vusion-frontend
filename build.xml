<?xml version="1.0" encoding="UTF-8"?>

<project name="vusion-frontend" default="build">

 <property file="build.properties"/>

 <condition property="vusiondir" value="/var/vusion">
   <not>  
      <isset property="vusiondir"/>
   </not>
 </condition>

 <target name="build"
   depends="prepare,run-composer,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,caketest,webtest,phpcb"/>

 <target name="tools-parallel"
         description="Run tools in parallel">
  <parallel threadCount="2">
   <sequential>
    <antcall target="pdepend"/>
    <antcall target="phpmd-ci"/>
   </sequential>
   <antcall target="phpcpd"/>
   <antcall target="phpcs-ci"/>
   <antcall target="phploc"/>
   <antcall target="phpdoc"/>
  </parallel>
 </target>
 
 <target name="clean" description="Cleanup build artifacts">
  <delete dir="${basedir}/build/api"/>
  <delete dir="${basedir}/build/code-browser"/>
  <delete dir="${basedir}/build/coverage"/>
  <delete dir="${basedir}/build/logs"/>
  <delete dir="${basedir}/build/pdepend"/>
 </target>

 <target name="prepare" depends="clean"
         description="Prepare for build">
  <mkdir dir="${basedir}/build/api"/>
  <mkdir dir="${basedir}/build/code-browser"/>
  <mkdir dir="${basedir}/build/coverage"/>
  <mkdir dir="${basedir}/build/logs"/>
  <mkdir dir="${basedir}/build/pdepend"/>
  <mkdir dir="${basedir}/build/test-results" />
 </target>

 <target name="lint">
  <apply executable="php" failonerror="true">
   <arg value="-l" />
   <fileset dir="${basedir}/app">
    <include name="**/*.php" />
    <exclude name="*/vendors/*.php"/>
    <modified />
   </fileset>
  </apply>
 </target>

 <target name="phploc" description="Measure project size using PHPLOC">
  <exec executable="phploc">
   <arg value="--log-csv" />
   <arg value="${basedir}/build/logs/phploc.csv" />
   <arg path="${basedir}/app" />
  </exec>
 </target>

 <target name="pdepend"
         description="Calculate software metrics using PHP_Depend">
  <exec executable="pdepend">
   <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
   <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
   <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
   <arg path="${basedir}/app" />
  </exec>
 </target>
 
 <target name="phpmd"
         description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="phpmd">
   <arg path="${basedir}/app" />
   <arg value="text" />
   <!--<arg value="${basedir}/build/phpmd.xml" />-->
   <arg value="unusedcode" /> 
  </exec>
 </target>

 <target name="phpmd-ci"
         description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
  <exec executable="phpmd">
   <arg path="${basedir}/app" />
   <arg value="xml" />
   <!--<arg value="${basedir}/build/phpmd.xml" />-->
   <arg value="unusedcode" />
   <arg value="--reportfile" />
   <arg value="${basedir}/build/logs/pmd.xml" />
   <arg value="--exclude" />
   <arg value="${basedir}/app/Plugin/" />
  </exec>
 </target>

 <target name="phpcs"
         description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
  <exec executable="phpcs">
   <arg value="--standard=${basedir}/build/ruleset.xml" />
   <arg path="${basedir}/app" />
  </exec>
 </target>

 <target name="phpcs-ci"
         description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
  <exec executable="phpcs">
   <arg value="-v" />
   <arg value="--report=checkstyle" />
   <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
   <arg value="--standard=${basedir}/build/ruleset.xml" />
   <arg value="--extensions=php" />
   <arg path="${basedir}/app/Controller" />
   <arg path="${basedir}/app/Model" />
   <arg path="${basedir}/app/View" />
   <arg path="${basedir}/app/Test" />
  </exec>
 </target>

 <target name="phpcpd" description="Find duplicate code using PHPCPD">
  <exec executable="phpcpd">
   <arg value="--log-pmd" />
   <arg value="${basedir}/build/logs/pmd-cpd.xml" />
   <arg path="${basedir}/app" />
  </exec>
 </target>

 <target name="phpdoc"
         description="Generate API documentation using PHPDocumentor">
  <exec executable="phpdoc">
   <arg value="--directory" />
   <arg path="${basedir}/app" />
   <arg value="--ignore" />
   <arg path="lib/*,app/Plugin/**/*"/>
   <arg value="--target" />
   <arg path="${basedir}/build/api" />
  </exec>
 </target>

 <target name="clear-cache"
         description="Remove Cake Cache files">
 <delete>
  	<fileset dir="${basedir}/app/tmp/cache/models/" includes="*"/>
  </delete>
 <delete>
  	<fileset dir="${basedir}/app/tmp/cache/persistent/" includes="*"/>
  </delete>
         
 </target>
 
 <!-- require composer to be install on the machine -->
 <target name="run-composer">
    <exec dir="composer" executable="composer">
      <arg value="install"/>
    </exec>
 </target>
 
 <target name="caketest" description="Run cake tests with PHPUnit" depends='clear-cache'>
 <exec executable="./app/Console/cake" failonerror="true">
 <!-- <exec executable="./app/Console/cake" failonerror="true"> -->
  	 <arg value="testsuite" />
     <arg value="--configuration" />
  	 <arg value="phpunit-caketest.xml" />
  	 <arg value="app" />
  	 <arg value="AllTests" />
  </exec>
 </target>

 <target name="pull4webtest" description="Pull the last develop version for the webtest">
<!-- backup the config files -->
 <mkdir dir="/tmp/vusion"/>
 <copy file="${vusiondir}/app/Config/database.php" todir="/tmp/vusion" overwrite="true"/>
 <copy file="${vusiondir}/app/Config/vusion.php" todir="/tmp/vusion" overwrite="true"/>
 <copy file="${vusiondir}/app/Config/email.php" todir="/tmp/vusion" overwrite="true"/>
 <copy file="${vusiondir}/app/Test/data/restore_data.sh" todir="/tmp/vusion" overwrite="true"/>
 <mkdir dir="/tmp/vusion/backend"/> 
 <copy todir="/tmp/vusion/backend" overwrite="true">
     <fileset dir="${vusiondir}/backend/etc"/>
 </copy>
<!-- stop the backend -->
 <exec dir="/bin" executable="bash">
    <arg value="/etc/init.d/supervisord.vusion" />
    <arg value="stop" />
 </exec>
 <sleep seconds="5"/>
<!--remove log files-->
 <delete>
    <fileset dir="/var/log/supervisord" includes="*"/>
 </delete>
<!-- updating code  -->
 <exec dir="${vusiondir}" executable="git">  
    <arg value="fetch" />
    <arg value="--all" />
 </exec>
 <exec dir="${vusiondir}" executable="git">   
    <arg value="reset" />
    <arg value="--hard" />
    <arg value="origin/develop"/>
 </exec>
 <exec dir="${vusiondir}" executable="git">   
    <arg value="submodule" />
    <arg value="update" />
    <arg value="--force" />
 </exec>
<!-- restor config files -->
 <copy file="/tmp/vusion/database.php" todir="${vusiondir}/app/Config" overwrite="true"/>
 <copy file="/tmp/vusion/vusion.php" todir="${vusiondir}/app/Config" overwrite="true"/>
 <copy file="/tmp/vusion/email.php" todir="${vusiondir}/app/Config" overwrite="true"/>
 <copy file="/tmp/vusion/restore_data.sh" todir="${vusiondir}/app/Test/data" overwrite="true"/>
 <copy todir="${vusiondir}/backend/etc" overwrite="true">
     <fileset dir="/tmp/vusion/backend"/>
 </copy>
 <delete dir="/tmp/vusion"/>
 <!-- start the backend -->
 <exec executable="/etc/init.d/supervisord.vusion">
    <arg value="start" />
 </exec>
 <!-- necessary to automaticaly start after reboot -->
 <sleep seconds="5"/>
 <chgrp group="root">
    <fileset dir="/var/log/supervisord" includes="*"/>
 </chgrp>
 <chmod perm="660">
    <fileset dir="/var/log/supervisord" includes="*"/>
 </chmod>
 </target>

 <target name="webtest" description="Run web test with PHPUnit" depends='clear-cache,pull4webtest,init-db,init-oldprogram'>
 <exec executable="phpunit" failonerror="true">
 <!-- <exec executable="./app/Console/cake" failonerror="true"> -->
  	 <arg value="-c" />
  	 <arg value="phpunit-webtest.xml" />
  	 <arg value="webTest/" />
  </exec>
 </target>


 <target name="acl" description="Run AclExtras">
 <exec executable="./app/Console/cake" failonerror="true">
  	 <arg value="AclExtras.AclExtras" />
         <arg value="aco_sync" />
  </exec>
 </target>

 <target name="phpcb"
         description="Aggregate tool output with PHP_CodeBrowser">
  <exec executable="phpcb">
   <arg value="--log" />
   <arg path="${basedir}/build/logs" />
   <arg value="--source" />
   <arg path="${basedir}/app" />
   <arg value="--output" />
   <arg path="${basedir}/build/code-browser" />
  </exec>
 </target>

<target name="deployTest"
          description="import the necessary data in the database">
  <exec executable="./app/Console/cake" failonerror="true">
  <arg value="schema"/>
  <arg value="update"/>
  </exec>
</target>

<!--<input message="Password:" addproperty="password">
</input>-->


<target name="init-db" description="init the relational and mongo dbs">
  <!-- copy for restor a big dataset already present on the test server -->
  <exec dir="${vusiondir}" executable="bash">
     <arg value="./app/Test/data/restore_data.sh"/>
  </exec>
</target>

<target name="-check-oldprogram-imported">
    <available property="oldprogram.exists" file="${vusiondir}/app/Test/data/mongoDB/oldprogram/history.json"/>
</target>
<target name='init-oldprogram' depends="-check-oldprogram-imported" description='add oldProgram if not there' unless="oldprogram.exists">
  <mkdir dir="${vusiondir}/app/Test/data/mongoDB/oldprogram"/> 
  <copy todir="${vusiondir}/app/Test/data/mongoDB/oldprogram" failonerror="false">
     <fileset dir="/root/oldprogram"/>
  </copy>
  <exec dir="${vusiondir}" executable="bash">
     <arg value="./app/Test/data/mongoDB/import_program_db.sh"/>
     <arg value="oldprogram"/>
  </exec>
</target>

</project>
